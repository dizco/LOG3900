<Window x:Class="PolyPaint.Views.PixelEditorView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:converters="clr-namespace:PolyPaint.Converters"
        xmlns:uc="clr-namespace:PolyPaint.Views"
        Title="PolyPaint" Height="700" Width="900" Background="#CBD4E4" MinWidth="627" MinHeight="200"
        mc:Ignorable="d"
        xmlns:vm="clr-namespace:PolyPaint.ViewModels"
        d:DataContext="{d:DesignInstance vm:PixelEditorViewModel}">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="../Resources/Designs/ContentControl.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <converters:BorderConverter x:Key="BorderConverter" />
            <converters:BackgroundColorConverter x:Key="BackgroundColorConverter" />
            <converters:VisibilityConverter x:Key="VisibilityConverter" />
        </ResourceDictionary>
    </Window.Resources>
    <DockPanel>
        <Menu IsMainMenu="True" DockPanel.Dock="Top">
            <MenuItem Header="_Fichier">
                <MenuItem Header="_Exporter le dessin" Command="{Binding ExportImageCommand}"
                          CommandParameter="{Binding ElementName=DrawingSurface}" />
            </MenuItem>
            <MenuItem Header="_Dessin">
                <MenuItem Header="Historique des modifications" Command="{Binding OpenHistoryCommand}" IsEnabled="{Binding IsConnectedToDrawing}" />
                <MenuItem Header="Publier ce dessin comme modèle" Command="{Binding PublishAsTemplateCommand}" IsEnabled="{Binding IsConnectedToDrawing}"/>
            </MenuItem>
            <MenuItem Header="_Accessibilité">
                <MenuItem Header="{Binding LockUnlockDrawingMessage}" IsEnabled="{Binding AccessibilityToggleIsEnabled}" Command="{Binding TogglePasswordCommand}"/>
                <MenuItem Header="{Binding DrawingVisibilityMessage}" IsEnabled="{Binding AccessibilityToggleIsEnabled}" Command="{Binding ToggleVisibilityCommand}"/>
            </MenuItem>
        </Menu>
        <Border DockPanel.Dock="Top" BorderThickness="0,0,0,0.5" BorderBrush="#77000000">
            <StackPanel Orientation="Horizontal" Height="60">
                <StackPanel.Background>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0.01">
                        <GradientStop Color="Gray" />
                        <GradientStop Color="#FFFFFFFF" />
                        <GradientStop Color="#FFE0E0E0" Offset="1" />
                    </LinearGradientBrush>
                </StackPanel.Background>
                <Button Name="crayon" Width="40" Height="40" Margin="5"
                        BorderBrush="{Binding Path=ToolSelected, Converter={StaticResource BorderConverter}, ConverterParameter=crayon, UpdateSourceTrigger=PropertyChanged}"
                        Background="{Binding Path=ToolSelected, Converter={StaticResource BackgroundColorConverter}, ConverterParameter=crayon, UpdateSourceTrigger=PropertyChanged}"
                        Command="{Binding Path=ChooseTool}"
                        CommandParameter="pencil">
                    <StackPanel>
                        <Image Source="/Resources/crayon.png" />
                    </StackPanel>
                </Button>
                <Button Name="efface_segment" Width="40" Height="40" Margin="5"
                        BorderBrush="{Binding Path=ToolSelected, Converter={StaticResource BorderConverter}, ConverterParameter=efface_segment, UpdateSourceTrigger=PropertyChanged}"
                        Background="{Binding Path=ToolSelected, Converter={StaticResource BackgroundColorConverter}, ConverterParameter=efface_segment, UpdateSourceTrigger=PropertyChanged}"
                        Command="{Binding Path=ChooseTool}"
                        CommandParameter="eraser">
                    <StackPanel>
                        <Image Source="/Resources/efface_crayon.png" />
                    </StackPanel>
                </Button>
                <Button Name="Fill" Width="40" Height="40" Margin="5"
                        BorderBrush="{Binding Path=ToolSelected, Converter={StaticResource BorderConverter}, ConverterParameter=filler, UpdateSourceTrigger=PropertyChanged}"
                        Background="{Binding Path=ToolSelected, Converter={StaticResource BackgroundColorConverter}, ConverterParameter=filler, UpdateSourceTrigger=PropertyChanged}"
                        Command="{Binding Path=ChooseTool}"
                        CommandParameter="fill">
                    <StackPanel>
                        <Image Source="/Resources/Icons/fill.png" />
                    </StackPanel>
                </Button>
                <Button Name="SelectPixel" Width="40" Height="40" Margin="5" 
                        BorderBrush="{Binding Path=ToolSelected, Converter={StaticResource BorderConverter}, ConverterParameter=select_pixel, UpdateSourceTrigger=PropertyChanged}" 
                        Background="{Binding Path=ToolSelected, Converter={StaticResource BackgroundColorConverter}, ConverterParameter=select_pixel, UpdateSourceTrigger=PropertyChanged}" 
                        Command="{Binding Path=ChooseTool}"
                        CommandParameter="selector">
                    <StackPanel>
                        <Image Source="/Resources/Icons/Selector.png" Height="28" Width="28" />
                    </StackPanel>
                </Button>

                <xctk:ColorPicker x:Name="selecteurCouleur"
                                  VerticalContentAlignment="Stretch"
                                  Background="#00000000"
                                  ShowDropDownButton="False"
                                  ShowRecentColors="True"
                                  BorderBrush="#80000000"
                                  Margin="5,0,0,0" Width="39" Height="38"
                                  SelectedColor="{Binding Path=ColorSelected, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                  AvailableColorsHeader="Palette"
                                  StandardColorsHeader="Couleurs de base"
                                  StandardButtonHeader="Standard"
                                  RecentColorsHeader="Récemment utilisées"
                                  UsingAlphaChannel="True"
                                  AdvancedButtonHeader="Personnalisé" />
                <Slider Width="100" Height="26" Minimum="2" Maximum="15"
                        Value="{Binding Path=PixelSizeSelected, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                        Margin="12"
                        Foreground="Gray"
                        TickFrequency="10" TickPlacement="BottomRight" IsSnapToTickEnabled="False" />
                <StackPanel Orientation="Horizontal">
                    <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" />
                </StackPanel>
                <StackPanel Orientation="Vertical" Margin="5,5,5,5" VerticalAlignment="Center"
                            Visibility="{Binding Path=IsWriteableBitmapOnEdition, Converter={StaticResource VisibilityConverter}, UpdateSourceTrigger=PropertyChanged}" >
                    <Button Name="TurnClockwise" Width="24" Height="24" Margin="0"
                            HorizontalContentAlignment="Left"
                            BorderBrush="Transparent"
                            Background="Transparent"
                            Command="{Binding QuarterTurnClockwiseCommand}"
                            CommandParameter="{Binding ElementName=ContentControl}">
                        <StackPanel>
                            <Image Source="/Resources/rotate_right.png" />
                        </StackPanel>
                    </Button>
                    <Button Name="TurnCounterClockWise" Width="24" Height="24" Margin="0"
                            HorizontalContentAlignment="Left"
                            BorderBrush="Transparent"
                            Background="Transparent"
                            Command="{Binding QuarterTurnCounterClockwiseCommand}"
                            CommandParameter="{Binding ElementName=ContentControl}">
                        <StackPanel>
                            <Image Source="/Resources/rotate_left.png" />
                        </StackPanel>
                    </Button>
                </StackPanel>
                <StackPanel Orientation="Vertical" Margin="5,5,5,5" VerticalAlignment="Center"
                            Visibility="{Binding Path=IsWriteableBitmapOnEdition, Converter={StaticResource VisibilityConverter}, UpdateSourceTrigger=PropertyChanged}" >
                    <Button Name="VerticalFlip" Width="24" Height="24" Margin="0"
                            HorizontalContentAlignment="Left"
                            BorderBrush="Transparent"
                            Background="Transparent"
                            Command="{Binding HorizontalFlipCommand}">
                        <StackPanel>
                            <Image Source="/Resources/flip_vertically.png" />
                        </StackPanel>
                    </Button>
                    <Button Name="HorizontalFlip" Width="24" Height="24" Margin="0"
                            HorizontalContentAlignment="Left"
                            BorderBrush="Transparent"
                            Background="Transparent"
                            Command="{Binding VerticalFlipCommand}">
                        <StackPanel>
                            <Image Source="/Resources/flip_horizontally.png" />
                        </StackPanel>
                    </Button>
                </StackPanel>
                <StackPanel Orientation="Horizontal"
                            Visibility="{Binding Path=IsWriteableBitmapOnEdition, Converter={StaticResource VisibilityConverter}, UpdateSourceTrigger=PropertyChanged}">
                    <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" />
                </StackPanel>
                <Button Name="GreyFilter" Width="40" Height="40" Margin="5"
                        HorizontalContentAlignment="Left"
                        BorderBrush="Transparent"
                        Background="Transparent"
                        Visibility="{Binding Path=IsWriteableBitmapOnEdition, Converter={StaticResource VisibilityConverter}, UpdateSourceTrigger=PropertyChanged}"
                        Command="{Binding GrayFilterCommand}">
                    <StackPanel>
                        <Image Source="/Resources/Icons/palette.ico" />
                    </StackPanel>
                    <Button.ToolTip>
                        <ToolTip>
                            <TextBlock FontWeight="Bold">Tons de Gris</TextBlock>
                        </ToolTip>
                    </Button.ToolTip>
                </Button>
                <Button Name="InvertFilter" Width="40" Height="40" Margin="5"
                        HorizontalContentAlignment="Left"
                        BorderBrush="Transparent"
                        Background="Transparent"
                        Visibility="{Binding Path=IsWriteableBitmapOnEdition, Converter={StaticResource VisibilityConverter}, UpdateSourceTrigger=PropertyChanged}"
                        Command="{Binding InvertFilterCommand}">
                    <StackPanel>
                        <Image Source="/Resources/Icons/negate.png" VerticalAlignment="Center" Height="42" Width="53" />
                    </StackPanel>
                    <Button.ToolTip>
                        <ToolTip>
                            <TextBlock FontWeight="Bold">Effet Négatif</TextBlock>
                        </ToolTip>
                    </Button.ToolTip>
                </Button>
                <Button Name="BlurFilter" Width="40" Height="40" Margin="5"
                        HorizontalContentAlignment="Left"
                        BorderBrush="Transparent"
                        Background="Transparent"
                        Visibility="{Binding Path=IsWriteableBitmapOnEdition, Converter={StaticResource VisibilityConverter}, UpdateSourceTrigger=PropertyChanged}"
                        Command="{Binding GaussianBlurFilterCommand}">
                    <StackPanel >
                        <Image Source="/Resources/Icons/blur.png" />
                    </StackPanel>
                    <Button.ToolTip>
                        <ToolTip>
                            <TextBlock FontWeight="Bold">Flou Gaussien</TextBlock>
                        </ToolTip>
                    </Button.ToolTip>
                </Button>
            </StackPanel>
        </Border>
        <Border DockPanel.Dock="Bottom" Height="25" BorderThickness="0,0.75,0,0.75" BorderBrush="#77000000">
            <StackPanel Orientation="Horizontal" Background="#FFF0F0F0">
                <Image Source="/Resources/position.png" Margin="5,5,5,5" VerticalAlignment="Center" />
            </StackPanel>
        </Border>
        <Grid>
            <Grid DockPanel.Dock="Left">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Name="colonne" Width="550" />
                    <ColumnDefinition Width="6" />
                    <ColumnDefinition Width="145*"/>
                    <ColumnDefinition Width="23*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Name="ligne" Height="310" />
                    <RowDefinition Height="6" />
                </Grid.RowDefinitions>
                <Thumb Name="horizontal" Grid.Row="0" Grid.Column="1" Background="White" 
                       Width="6" Height="6" DragDelta="GlisserMouvementRecu" 
                       DragStarted="GlisserCommence" DragCompleted="GlisserTermine"
                 />
                <Thumb Name="diagonal" Grid.Row="1" Grid.Column="1" Background="White" 
                        Width="6" Height="6" DragDelta="GlisserMouvementRecu" 
                        DragStarted="GlisserCommence" DragCompleted="GlisserTermine"
                 />
                <Thumb Name="vertical" Grid.Row="1" Grid.Column="0" Background="White" 
                        Width="6" Height="6" DragDelta="GlisserMouvementRecu" 
                        DragStarted="GlisserCommence" DragCompleted="GlisserTermine"
                 />
                <Grid Name="GridSurface"
                      MouseMove="GridSurfaceMouseMove" MouseUp="GridSurfaceMouseUp" MouseDown="GridSurfaceMouseDown">
                    <Border x:Name="DisplayArea" BorderThickness="5,5,0,0" >
                        <Canvas x:Name="DrawingSurface"
                                Background="White" ClipToBounds="True"  
                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                MouseMove="DrawingSurfaceMouseMove" MouseEnter="DrawingSurfaceMouseEnter"
                                PreviewMouseDown=" DrawingSurfacePreviewMouseDown">
                            <Image x:Name="DrawnImage"
                                  VerticalAlignment="Top" Source="{Binding WriteableBitmap}" />

                            <!-- This image contains another writeableBitmap that is blit to our principal writeableBitmap after his edition-->
                            <Canvas x:Name="SelectedZoneCanvas" Cursor="SizeAll" >
                                <ContentControl x:Name="ContentControl" 
                                                Canvas.Left="{Binding CropWriteableBitmapPosition.X}"
                                                Canvas.Top="{Binding CropWriteableBitmapPosition.Y}"
                                                Style="{StaticResource DesignerItemStyle}"
                                                PreviewMouseLeftButtonUp="ContentControlOnPreviewMouseLeftButtonUp"
                                                PreviewMouseLeftButtonDown="ContentControlOnPreviewMouseLeftButtonDown"
                                                SizeChanged="ContentControlOnSizeChanged">
                                    <Image x:Name="SelectedZoneImage" Stretch="Fill"  IsHitTestVisible="False"  Source="{Binding CropWriteableBitmap}"/>
                                </ContentControl>
                            </Canvas>
                        </Canvas>
                        <Border.Effect>
                            <DropShadowEffect Opacity="0.3" BlurRadius="10" />
                        </Border.Effect>
                    </Border>

                    <!-- This canvas is overlaid over the previous canvas and is used to 
                    place the rectangle that implements the drag selection box. -->
                    <Canvas Margin="5,5,0,0">
                            <Rectangle
                            x:Name="selectionBox"
                            Visibility="Collapsed"
                            Stroke="Black"
                            StrokeThickness="1"
                            StrokeDashArray="4 4" />
                    </Canvas>
                </Grid>
            </Grid>
            <Grid Width="300" Visibility="{Binding ChatDocked}" HorizontalAlignment="Right" Background="WhiteSmoke">
                <uc:ChatView />
            </Grid>
        </Grid>
    </DockPanel>
</Window>